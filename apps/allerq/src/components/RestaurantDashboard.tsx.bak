"use client";
import { useState, useEffect } from "react";
import { useRestaurants, Restaurant, RestaurantFilters } from "@/hooks/useRestaurants";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Icons } from "@/components/icons";
import { RestaurantCard } from "@/components/RestaurantCard";
import { RestaurantFilter } from "@/components/RestaurantFilter";

export function RestaurantDashboard() {
  const { restaurants, loading, error, fetchRestaurants, saveRestaurant, filterRestaurants } = useRestaurants();
  const [filters, setFilters] = useState<RestaurantFilters>({
    searchTerm: "",
    status: "all",
    sortBy: "name",
    sortOrder: "asc"
  });
  const [filteredRestaurants, setFilteredRestaurants] = useState<Restaurant[]>([]);
  const [isCreating, setIsCreating] = useState(false);
  const [newRestaurant, setNewRestaurant] = useState({ name: "", address: "", contact: "" });
  const [availableCuisines, setAvailableCuisines] = useState<string[]>([]);
  
  useEffect(() => {
    fetchRestaurants();
  }, [fetchRestaurants]);
  
  useEffect(() => {
    // Extract unique cuisine types for the filter dropdown
    if (restaurants.length > 0) {
      const cuisines = restaurants
        .filter((r: Restaurant) => r.cuisine)
        .map((r: Restaurant) => r.cuisine!)
        .filter((value: string, index: number, self: string[]) => self.indexOf(value) === index);
      setAvailableCuisines(cuisines);
    }
    
    // Apply filters
    setFilteredRestaurants(filterRestaurants(filters));
  }, [restaurants, filters, filterRestaurants]);

  const handleCreateRestaurant = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsCreating(true);
    try {
      await saveRestaurant(newRestaurant);
      setNewRestaurant({ name: "", address: "", contact: "" });
    } catch (err) {
      console.error("Error creating restaurant:", err);
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <div className="container mx-auto py-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Create New Restaurant</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleCreateRestaurant} className="space-y-4">
            <Input
              placeholder="Restaurant Name"
              value={newRestaurant.name}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewRestaurant({ ...newRestaurant, name: e.target.value })}
              required
            />
            <Input
              placeholder="Address"
              value={newRestaurant.address}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewRestaurant({ ...newRestaurant, address: e.target.value })}
            />
            <Input
              placeholder="Contact Number"
              value={newRestaurant.contact}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewRestaurant({ ...newRestaurant, contact: e.target.value })}
            />
            <Button type="submit" disabled={isCreating}>
              {isCreating && <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />}
              Create Restaurant
            </Button>
          </form>
        </CardContent>
      </Card>
      
      <RestaurantFilter 
        onFilterChange={setFilters}
        knownCuisines={availableCuisines}
      />

      <Tabs defaultValue="grid" className="w-full">
        <TabsList>
          <TabsTrigger value="grid">Grid View</TabsTrigger>
          <TabsTrigger value="list">List View</TabsTrigger>
        </TabsList>
        <TabsContent value="grid">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {loading ? (
              <div className="col-span-full flex justify-center">
                <Icons.spinner className="h-6 w-6 animate-spin" />
              </div>
            ) : error ? (
              <div className="col-span-full text-red-500">{error}</div>
            ) : restaurants.length === 0 ? (
              <div className="col-span-full text-center text-gray-500">
                No restaurants found. Create your first restaurant above.
              </div>
            ) : (searchTerm && filteredRestaurants.length === 0) ? (
              <div className="col-span-full text-center text-gray-500">
                No restaurants match your search.
              </div>
            ) : (
              (searchTerm ? filteredRestaurants : restaurants).map((restaurant) => (
                <RestaurantCard key={restaurant.id} restaurant={restaurant} onRefresh={fetchRestaurants} />
              ))
            )}
          </div>
        </TabsContent>
        <TabsContent value="list">
          <div className="space-y-4">
            {loading ? (
              <div className="flex justify-center">
                <Icons.spinner className="h-6 w-6 animate-spin" />
              </div>
            ) : error ? (
              <div className="text-red-500">{error}</div>
            ) : restaurants.length === 0 ? (
              <div className="text-center text-gray-500">
                No restaurants found. Create your first restaurant above.
              </div>
            ) : (
              (searchTerm ? filteredRestaurants : restaurants).map((restaurant) => (
                <Card key={restaurant.id}>
                  <CardContent className="flex items-center justify-between p-4">
                    <div>
                      <h3 className="font-semibold">{restaurant.name}</h3>
                      <p className="text-sm text-gray-500">{restaurant.address}</p>
                    </div>
                    <div className="flex gap-2">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => window.location.href = `/dashboard/restaurants/${restaurant.id}/settings`}
                      >
                        Settings
                      </Button>
                      <Button 
                        variant="destructive" 
                        size="sm"
                        onClick={async () => {
                          if (confirm("Are you sure you want to delete this restaurant?")) {
                            try {
                              const response = await fetch(`/api/restaurants/${restaurant.id}`, {
                                method: "DELETE",
                              });
                              if (response.ok) {
                                fetchRestaurants();
                              } else {
                                alert("Failed to delete restaurant");
                              }
                            } catch (err) {
                              console.error("Error deleting restaurant:", err);
                              alert("Failed to delete restaurant");
                            }
                          }
                        }}
                      >
                        Delete
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
