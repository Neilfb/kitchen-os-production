"use client";

// Add/edit form for restaurant
import { useState, useEffect } from "react";
import { useRestaurants, RestaurantInput } from "@/hooks/useRestaurants";
import Image from "next/image";

interface RestaurantFormProps {
  restaurantId?: string;
  initialData?: RestaurantInput;
  onSuccess?: () => void;
  onCancel?: () => void;
}

export default function RestaurantForm({
  restaurantId,
  initialData,
  onSuccess,
  onCancel,
}: RestaurantFormProps) {
  const { getRestaurant, saveRestaurant } = useRestaurants();
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [form, setForm] = useState<RestaurantInput>(
    initialData || {
      name: "",
      address: "",
      contact: "",
      logo: "",
      geolocation: "",
    }
  );

  const [error, setError] = useState("");
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  
  // Load restaurant data if editing an existing restaurant
  useEffect(() => {
    if (restaurantId) {
      setIsLoading(true);
      getRestaurant(restaurantId)
        .then(data => {
          if (data) {
            setForm(data);
          }
        })
        .catch(err => {
          setError(`Could not load restaurant: ${err.message}`);
        })
        .finally(() => {
          setIsLoading(false);
        });
    }
  }, [restaurantId, getRestaurant]);

  // Form field change handler
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
    
    // Clear field-specific error when user starts typing
    if (formErrors[name]) {
      setFormErrors({ ...formErrors, [name]: "" });
    }
  };

  // Form validation
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!form.name.trim()) {
      newErrors.name = "Restaurant name is required";
    }
    
    if (form.contact && !/^\+?[0-9\s\-()]+$/.test(form.contact)) {
      newErrors.contact = "Please enter a valid phone number";
    }
    
    if (form.logo && !form.logo.match(/^https?:\/\/.+/i)) {
      newErrors.logo = "Please enter a valid URL for the logo";
    }
    
    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Form submission handler
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    setError("");
    
    try {
      await saveRestaurant(form);
      if (onSuccess) onSuccess();
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to save restaurant");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Show loading indicator during initial data load
  if (isLoading) {
    return (
      <div className="flex justify-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-700"></div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}
      
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
          Restaurant Name*
        </label>
        <input 
          id="name"
          name="name"
          value={form.name}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
          required
        />
      </div>
      <div>
        <label className="block mb-1">Address</label>
        <input
          name="address"
          value={form.address}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
          required
        />
      </div>
      <div>
        <label htmlFor="address" className="block text-sm font-medium text-gray-700 mb-1">
          Address
        </label>
        <textarea
          id="address"
          name="address"
          value={form.address || ""}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
          rows={2}
        />
        {formErrors.address && (
          <p className="mt-1 text-sm text-red-600">{formErrors.address}</p>
        )}
      </div>

      <div>
        <label htmlFor="contact" className="block text-sm font-medium text-gray-700 mb-1">
          Contact Number
        </label>
        <input
          name="contact"
          value={form.contact}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
        />
      </div>
      <div>
        <label className="block mb-1">Logo URL</label>
        <input
          name="logo"
          value={form.logo}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
        />
      </div>
      <div>
        <label className="block mb-1">Geolocation</label>
        <input
          name="geolocation"
          value={form.geolocation}
          onChange={handleChange}
          className="w-full border px-3 py-2 rounded"
        />
      </div>
      {error && <div className="text-red-600">{error}</div>}
      <button
        type="submit"
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        Save
      </button>
    </form>
  );
}
